/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	runaijobv1 "github.com/run-ai/runai-cli/cmd/mpi/api/runaijob/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/testing"
)

// FakeRunaiJobs implements RunaiJobInterface
type FakeRunaiJobs struct {
	Fake *FakeRunV1
	ns   string
}

var runaijobsResource = schema.GroupVersionResource{Group: "run.ai", Version: "v1", Resource: "runaijobs"}

var runaijobsKind = schema.GroupVersionKind{Group: "run.ai", Version: "v1", Kind: "RunaiJob"}

// Get takes name of the runaiJob, and returns the corresponding runaiJob object, and an error if there is any.
func (c *FakeRunaiJobs) Get(name string, options v1.GetOptions) (result *runaijobv1.RunaiJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(runaijobsResource, c.ns, name), &runaijobv1.RunaiJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*runaijobv1.RunaiJob), err
}

// List takes label and field selectors, and returns the list of RunaiJobs that match those selectors.
func (c *FakeRunaiJobs) List(opts v1.ListOptions) (result *runaijobv1.RunaiJobList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(runaijobsResource, runaijobsKind, c.ns, opts), &runaijobv1.RunaiJobList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &runaijobv1.RunaiJobList{ListMeta: obj.(*runaijobv1.RunaiJobList).ListMeta}
	for _, item := range obj.(*runaijobv1.RunaiJobList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested runaiJobs.
func (c *FakeRunaiJobs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(runaijobsResource, c.ns, opts))

}

// Create takes the representation of a runaiJob and creates it.  Returns the server's representation of the runaiJob, and an error, if there is any.
func (c *FakeRunaiJobs) Create(runaiJob *runaijobv1.RunaiJob, opts v1.CreateOptions) (result *runaijobv1.RunaiJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(runaijobsResource, c.ns, runaiJob), &runaijobv1.RunaiJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*runaijobv1.RunaiJob), err
}

// Update takes the representation of a runaiJob and updates it. Returns the server's representation of the runaiJob, and an error, if there is any.
func (c *FakeRunaiJobs) Update(runaiJob *runaijobv1.RunaiJob, opts v1.UpdateOptions) (result *runaijobv1.RunaiJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(runaijobsResource, c.ns, runaiJob), &runaijobv1.RunaiJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*runaijobv1.RunaiJob), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeRunaiJobs) UpdateStatus(runaiJob *runaijobv1.RunaiJob, opts v1.UpdateOptions) (*runaijobv1.RunaiJob, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(runaijobsResource, "status", c.ns, runaiJob), &runaijobv1.RunaiJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*runaijobv1.RunaiJob), err
}

// Delete takes name of the runaiJob and deletes it. Returns an error if one occurs.
func (c *FakeRunaiJobs) Delete(name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(runaijobsResource, c.ns, name), &runaijobv1.RunaiJob{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRunaiJobs) DeleteCollection(opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(runaijobsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &runaijobv1.RunaiJobList{})
	return err
}

// Patch applies the patch and returns the patched runaiJob.
func (c *FakeRunaiJobs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *runaijobv1.RunaiJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(runaijobsResource, c.ns, name, pt, data, subresources...), &runaijobv1.RunaiJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*runaijobv1.RunaiJob), err
}
